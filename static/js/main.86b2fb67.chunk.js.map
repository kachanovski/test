{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","data","setData","inputValue","setInputValue","filter","setFilter","className","value","onChange","e","currentTarget","type","checked","onClick","i","length","toLocaleLowerCase","includes","map","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LA6CeA,MAzCf,WAAgB,IAAD,EAEaC,IAAMC,SAAwB,IAF3C,mBAEJC,EAFI,KAEEC,EAFF,OAGyBH,IAAMC,SAAiB,IAHhD,mBAGJG,EAHI,KAGQC,EAHR,OAIiBL,IAAMC,UAAkB,GAJzC,mBAIJK,EAJI,KAIIC,EAJJ,KA6BX,OACI,sBAAKC,UAAU,MAAf,UAEI,uBAAOC,MAAOL,EAAYM,SAzBP,SAACC,GACxBN,EAAcM,EAAEC,cAAcH,UAyB1B,uBAAOI,KAAM,WAAYC,QAASR,EAAQI,SAtB3B,SAACC,GACpBJ,EAAUI,EAAEC,cAAcE,YAsBtB,wBAAQC,QAnBM,WACS,kBAAfX,IAA4BA,EAAa,GACjDD,EAAQ,CAAC,aAAaG,QAAO,SAAAU,GAAC,OAAIA,EAAEC,QAAUb,OAiB9C,oBACA,wBAAQW,QAdM,WACC,KAAfX,GACAD,EAAQ,CAAC,aAAaG,QAAO,SAAAU,GACzB,OAAOV,EAASU,EAAEE,oBAAoBC,SAASf,EAAWc,qBAAuBF,EAAEG,SAASf,QAWhG,oBACCF,EAAKkB,KAAI,SAACJ,EAAGK,GAAJ,OAAW,8BAAeL,GAALK,UC1B5BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.86b2fb67.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport './App.css';\n\n\nfunction App() {\n\n    const [data, setData] = React.useState<Array<string>>([])\n    const [inputValue, setInputValue] = React.useState<string>('')\n    const [filter, setFilter] = React.useState<boolean>(false)\n\n\n    const onChangeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setInputValue(e.currentTarget.value)\n    }\n\n    const onChangeFilter = (e: ChangeEvent<HTMLInputElement>) => {\n        setFilter(e.currentTarget.checked)\n    }\n\n    const onClickNumber = () => {\n        if (typeof +inputValue === \"number\" && +inputValue > 0) {\n            setData(['dataArray'].filter(i => i.length > +inputValue))\n        }\n\n    }\n    const onClickString = () => {\n        if (inputValue !== '') {\n            setData(['dataArray'].filter(i => {\n                return filter ? i.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase()) : i.includes(inputValue)\n            }))\n        }\n    }\n\n    return (\n        <div className=\"App\">\n\n            <input value={inputValue} onChange={onChangeInputValue}/>\n            <input type={'checkbox'} checked={filter} onChange={onChangeFilter}/>\n            <button onClick={onClickNumber}>number</button>\n            <button onClick={onClickString}>string</button>\n            {data.map((i, id) => <div key={id}>{i}</div>)}\n        </div>\n    );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}